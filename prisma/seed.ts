import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  try {
    // Limpar dados existentes
    await prisma.userProgress.deleteMany();
    await prisma.exercise.deleteMany();
    await prisma.lesson.deleteMany();

    // Li√ß√£o 1: Ol√° Mundo em √âgua
    await prisma.lesson.create({
      data: {
        title: "üëã Ol√° Mundo em √âgua",
        description: "D√™ seus primeiros passos na programa√ß√£o com a linguagem √âgua!",
        content: `

Que tal come√ßar com o famoso "Ol√° Mundo"? √â uma tradi√ß√£o que todo programador come√ßa assim!

## O que vamos aprender? üìö

Em √âgua, usamos o comando \`escreva()\` para mostrar mensagens na tela. √â como se estiv√©ssemos conversando com o computador!

### Veja como √© simples:

\`\`\`egua
escreva("Ol√°, Mundo!");
\`\`\`


### Por que isso √© importante?

Mostrar mensagens na tela √© uma habilidade fundamental na programa√ß√£o. √â como se voc√™ estivesse ensinando o computador a se comunicar com as pessoas!`,
        order: 1,
        exercises: {
          create: {
            title: "Seu primeiro programa",
            description: "Chegou sua vez! Escreva um programa que mostre a mensagem 'Ol√°, Mundo!' na tela.",
            expectedOutput: "Ol√°, Mundo!",
            expectedCode: `escreva("Ol√°, Mundo!");`
          }
        }
      }
    });

    // Li√ß√£o 2: Coment√°rios no C√≥digo
    await prisma.lesson.create({
      data: {
        title: "‚úèÔ∏è Coment√°rios no C√≥digo",
        description: "Aprenda a documentar seu c√≥digo de forma clara e organizada",
        content: `

Os coment√°rios s√£o como **notas explicativas** que deixamos no nosso c√≥digo. Eles s√£o super importantes para:

- Explicar o que cada parte do c√≥digo faz
- Ajudar outros programadores a entenderem seu c√≥digo
- Fazer anota√ß√µes para voc√™ mesmo no futuro

## Como fazer coment√°rios em √âgua?

Em √âgua, usamos o s√≠mbolo \` # \` para criar coment√°rios. Tudo que vem depois deste s√≠mbolo √© ignorado pelo computador!

### Exemplos pr√°ticos:

\`\`\`egua
# Este √© um coment√°rio simples
escreva("Ol√°!") # Aqui vamos mostrar uma sauda√ß√£o
\`\`\`
`
,
        order: 2,
        exercises: {
          create: {
            title: "Praticando Coment√°rios",
            description: "Crie um programa que mostre 'Bom dia!' e adicione coment√°rios explicando cada parte do seu c√≥digo.",
            expectedOutput: "Bom dia!",
            expectedCode: `escreva("Bom dia!") #Exibe a sauda√ß√£o na tela`
          }
        }
      }
    });

    // Li√ß√£o 3:Usando Vari√°veis
    await prisma.lesson.create({
      data: {
        title: "üì¶ Usando Vari√°veis",
        description: "Aprenda a guardar e manipular informa√ß√µes no seu programa",
        content: `

Imagine que vari√°veis s√£o como **caixas** üì¶ onde podemos guardar informa√ß√µes para usar depois!

## Como criar uma vari√°vel?

Em √âgua, usamos a palavra \`var\` para criar essas vari√°veis:

\`\`\`egua
var nome = "Maria"
escreva(nome)  # Mostra: Maria
\`\`\`

Podemos mudar o valor delas quando quisermos! 
\`\`\`egua
nome = "Jo√£o"
escreva(nome)  # Agora mostra: Jo√£o
\`\`\`

### üí° Dicas importantes:

- Escolha nomes que fa√ßam sentido (ex: nome, idade, altura)
- Voc√™ pode mudar o valor de uma vari√°vel quantas vezes quiser
- Cada vari√°vel √© √∫nica, como uma caixinha com seu pr√≥prio nome
`,

        order: 3,
        exercises: {
          create: {
            title: "Criando sua primeira vari√°vel",
            description: "Crie uma vari√°vel com seu nome Pedro e use o comando escreva( ) para mostr√°-la em tela.",
            expectedOutput: "Pedro",
            expectedCode: `var nome = "Pedro"
escreva(nome);`
          }
        }
      }
    });

    console.log("‚úÖ Dados inseridos com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro ao inserir dados:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 